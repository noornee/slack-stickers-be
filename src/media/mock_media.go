// Code generated by MockGen. DO NOT EDIT.
// Source: media.go

// Package media is a generated GoMock package.
package media

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// UploadSticker mocks base method.
func (m *MockService) UploadSticker(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSticker", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSticker indicates an expected call of UploadSticker.
func (mr *MockServiceMockRecorder) UploadSticker(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSticker", reflect.TypeOf((*MockService)(nil).UploadSticker), ctx, name)
}

// MockmediaProvider is a mock of mediaProvider interface.
type MockmediaProvider struct {
	ctrl     *gomock.Controller
	recorder *MockmediaProviderMockRecorder
}

// MockmediaProviderMockRecorder is the mock recorder for MockmediaProvider.
type MockmediaProviderMockRecorder struct {
	mock *MockmediaProvider
}

// NewMockmediaProvider creates a new mock instance.
func NewMockmediaProvider(ctrl *gomock.Controller) *MockmediaProvider {
	mock := &MockmediaProvider{ctrl: ctrl}
	mock.recorder = &MockmediaProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmediaProvider) EXPECT() *MockmediaProviderMockRecorder {
	return m.recorder
}

// SendDynamicEmail mocks base method.
func (m *MockmediaProvider) SendDynamicEmail(ctx context.Context, payload UploadPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDynamicEmail", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDynamicEmail indicates an expected call of SendDynamicEmail.
func (mr *MockmediaProviderMockRecorder) SendDynamicEmail(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDynamicEmail", reflect.TypeOf((*MockmediaProvider)(nil).SendDynamicEmail), ctx, payload)
}
